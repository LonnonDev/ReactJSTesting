{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Heading","title","getDisplayValue","count","newdisplay","App","useState","setCount","onClick","type","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAGA,SAASA,EAAT,GAA4C,IAA1BC,EAAyB,EAAzBA,MACjB,OAAO,6BAAKA,IAGb,IAAMC,EAAkB,SAACC,GACxB,GAAa,GAATA,EACH,IAAIC,EAAa,qBACX,GAAGD,EAAQ,KAAOA,GAAS,EAC7BC,EAAa,+BACX,GAAID,GAAS,KAAOA,GAAS,IAC/BC,EAAa,yBACX,GAAID,EAAQ,IACdC,EAAa,qBAEbA,EAAa,mBAElB,OAAOA,GAeOC,MAZf,WACC,MAA0BC,mBAAS,GAAnC,mBAAOH,EAAP,KAAcI,EAAd,KACA,OACC,gCACC,cAACP,EAAD,CAASC,MAAOE,IAChB,6BAAKD,EAAgBC,KACrB,uBAAOK,QAAS,kBAAMD,EAASJ,EAAQ,IAAIM,KAAK,SAASC,MAAM,cAC/D,uBAAOF,QAAS,kBAAMD,EAASJ,EAAQ,IAAIM,KAAK,SAASC,MAAM,kBCfnDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1f7b06c9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\n\nfunction Heading({title}: {title: number}) {\n\treturn <h1>{title}</h1>\n}\n\nconst getDisplayValue = (count: number) => {\n\tif (count == 0) {\n\t\tvar newdisplay = \"Wow you suck!\"\n\t} else if(count < 100 && count >= 0) {\n\t\tvar newdisplay = \"Wow that's pretty good!\"\n\t} else if (count <= 999 && count >= 100) {\n\t\tvar newdisplay = \"You are the best!\"\n\t} else if (count > 999) {\n\t\tvar newdisplay = \"Wow good job!\"\n\t} else {\n\t\tvar newdisplay = \"You suck so bad!\"\n\t}\n\treturn newdisplay\n}\n\nfunction App() {\n\tconst [count, setCount] = useState(0);\n\treturn (\n\t\t<div>\n\t\t\t<Heading title={count}></Heading>\n\t\t\t<h1>{getDisplayValue(count)}</h1>\n\t\t\t<input onClick={() => setCount(count + 1)} type=\"Button\" value=\"Increment\"/>\n\t\t\t<input onClick={() => setCount(count - 1)} type=\"Button\" value=\"Decrement\"/>\n\t\t</div>\n\t); \n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}